LeetCode:




Consecutive Numbers

with consecutive_num as (
select
case when (lead (num, 1,’-1’) over (order by id) = num and
lag(num,1,’-1’) over (order by id) = num)
then num end as ConsecutiveNums
from Logs)
select distinct ConsecutiveNums from
consecutive_num where ConsecutiveNums is not null

Duplicate Emails
with cte as (select email as Email,dense_rank() over (partition by email order by id) as rn from person) select distinct(Email) from cte where rn >=2;


Department Highest Salary:
with cte as (select d.name as Department , e.name as Employee,e.salary as Salary , dense_rank() over(partition by e.departmentId order by e.salary desc) as rn from employee e inner join department d on e.departmentId = d.id ) select Department,Employee,Salary from cte where rn = 1;

Customers Who Never Order

select c.name as Customers from customers c  where c.id not in(select customerId from orders);
select c.name as Customers from customers c left join orders o on c.id = o.customerId where o.customerId is null;
 select name as Customers from customers c where not exists (select * from orders o where o.customerId = c.id);

Department Top Three Salaries

with cte as (select d.name as Department , e.name as Employee , e.salary as Salary , dense_rank() over(partition by e.departmentId order by e.salary desc) as rn from employee e inner join department d on e.departmentId = d.id) select Department , Employee, Salary from cte where rn <= 3;

Rising Temperature

with cte as(select id ,temperature, lag(temperature,1) over(order by recordDate ) as nxtdaytemp ,lag(recordDate,1,recordDate) over (order by recordDate) as prev_date ,recordDate from weather ) select id from cte where nxtdaytemp < temperature and datediff(recordDate,prev_date) = 1 ;

Delete Duplicate Emails:

delete from person where id in (with cte as (select id,email,dense_rank() over (partition by email order by id) as rn from person) select id from cte where rn >= 2);



Trips and Users 

SELECT Request_at AS Day,
ROUND(SUM(IF(Status != 'completed', 1, 0)) /COUNT(Status) ,2) AS 'Cancellation Rate'
FROM Trips
WHERE Request_at >= "2013-10-01" AND Request_at <= "2013-10-03"
AND Client_Id NOT IN (SELECT Users_Id FROM Users WHERE Banned = "Yes")
AND Driver_Id NOT IN (SELECT Users_Id FROM Users WHERE Banned = "Yes")
GROUP BY Request_at

SELECT Request_at AS Day, 
round(sum(case when (status = "cancelled_by_driver" or status = "cancelled_by_client") then 1 else 0 end) / count(status),2) as 'Cancellation Rate'
FROM Trips
where Request_at between '2013-10-01' and '2013-10-03'
and client_id not in (select users_id from users where banned = 'Yes')
and driver_id not in (select users_id from users where banned = 'Yes')
group by Request_at;


SELECT Request_at AS Day, 
round(sum(case when (status != "completed") then 1 else 0 end) / count(status),2) as 'Cancellation Rate'
FROM Trips
where Request_at between '2013-10-01' and '2013-10-03'
and client_id not in (select users_id from users where banned = 'Yes')
and driver_id not in (select users_id from users where banned = 'Yes')
group by Request_at;


Game Play Analysis I
with cte as (select player_id ,min(event_date) as first_login from activity group by player_id)
select * from cte;

Find Customer Referee:
with cte as (select name from Customer where referee_id is null or referee_id != 2) select * from cte;

Customer Placing the Largest Number of Orders:
with cte as (select customer_number,count(order_number) as cnt from orders group by customer_number) select customer_number from cte where cnt in (select max(cnt) from cte);

Big Countries:
with cte as (select name ,population,area from world where area >= 3000000 or population >=25000000 ) select * from cte;

Classes More Than 5 Students
with cte as (select class , count(student) as cnt from courses group by class) select class from cte where cnt >=5;

Human Traffic of Stadium:
with cte as (select * , id - rank() over(order by id asc) as diff from stadium where people >= 100) ,cte2 as (select * ,count(*) over(partition by diff) as cnt from cte) select id,visit_date , people  from cte2 where cnt >=3;


Sales Person:
with cte as (select c.name as companyname  ,o.sales_id as order_sid from company c inner join orders o on c.com_id = o.com_id) , cte2 as (select s.name as name,ct.companyname as cname from salesperson s inner join cte ct on s.sales_id=ct.order_sid where ct.companyname ='RED') select name from salesperson where name not in (select name from cte2);

Tree Node:
select id , case when p_id is null then 'Root'
                 when id not in (select distinct(p_id) from tree where p_id is not null) then 'Leaf'
                 else 'Inner'
            end as Type
from tree;

Not Boring Movies
select * from Cinema where mod(id,2) = 1 and description != 'boring' order by rating desc;

Exchange Seats:
with cte as (select id ,student , lag(student,1,student) over (order by id) as prev_student,lead(student,1,student) over (order by id) as next_student from seat) select id , case when mod(id,2) = 0 then prev_student else next_student end as student from cte;

Swap Salary:
update salary set sex = case when sex='m' then 'f' else 'm' end
update salary set sex = if (sex='m','f','m')

Actors and Directors Who Cooperated At Least Three Times:
with cte as (select actor_id,director_id ,count(case when actor_id = director_id then 1 else 0 end ) as cnt from actordirector group by actor_id,director_id) select actor_id,director_id from cte where cnt >=3;

Sales Analysis III:
with cte as (select p.product_id,p.product_name from product p inner join sales s on p.product_id=s.product_id group by p.product_id,p.product_name having min(s.sale_date) >= '2019-01-01'and max(s.sale_date) <= '2019-03-31') select * from cte;


User Activity for the Past 30 Days I:

select activity_date as 'day',
count(distinct user_id) as 'active_users'
from activity 
where activity_date between
'2019-06-28' and '2019-07-27'
group by activity_date;


Article Views I
select distinct author_id as id
from Views
where author_id = viewer_id
order by id;

Market Analysis I:
select u.user_id as 'buyer_id',u.join_date as 'join_date',
count(o.order_date) as 'orders_in_2019' from users u left join orders o on u.user_id=o.buyer_id
and year(o.order_date) ='2019'
group by user_id

Input Table PIVOT question

with cte as (select case when age between 18 and 60 then '18-60' else '61+' end as age_group,  case when score=10 then 1 else 0 end as good, case when score=15 then 1 else 0 end as exceptional, score from input) select age_group,sum(good) as good,sum(exceptional) as exceptional  from cte group by age_group;
